equipamentos = []
valores = []
seriais = []
departamentos = []
resposta = "S"
while resposta =="S":
    equipamentos.append(input("Equipamento: "))
    valores.append((float(input("Valor: "))))
    seriais.append((int(input("Numero de serial: "))))
    departamentos.append((input("Departamento: ")))
    resposta = input('Digite \"S\" para continuar: ').upper()


for indice in range(0,len(equipamentos)):
    print("Equipamento..: ",(indice+1))
    print("Nome ......", equipamentos[indice])
    print("Valor......",valores[indice])
    print("Serial.....",seriais[indice])
    print("Departamento.",departamentos[indice])
    break

buscas=input("Digite o nome do equipamento que deseja buscar: ")
for indice in range(0,len(equipamentos)):
    if buscas==equipamentos[indice]:
        print("Valor ..: ",valores[indice])
        print("Serial..: ",seriais[indice])
        break

depreciacao = input("Degite o nome do equipamento que será depreciado: ")
for indice in range(0,len(equipamentos)):
    if depreciacao==equipamentos[indice]:
        print("Valor antigo: ",valores[indice])
        valores[indice] = valores[indice]* 0.9
        print("Novo valor: ",valores[indice])
        break

serial = int(input("Digite o serial do equipamento que será excluído: "))
for indice in range(0,len(departamentos)):
    if seriais[indice]==serial:
        del departamentos[indice]
        del equipamentos[indice]
        del seriais[indice]
        del valores[indice]

for indice in range(0,len(equipamentos)):
    print("Equipamentos..: ",(indice+1))
    print("Valor....: ",equipamentos[indice])
    print("Serial ....: ",seriais[indice])
    print("Departamento ..: ",departamentos[indice])


Um algoritmo que permite ao usuário cadastrar equipamentos, valores, seriais e departamentos, e depois realizar algumas operações com esses dados, como buscar, depreciar e excluir. O código está dividido em cinco partes principais:
A primeira parte é a declaração de quatro listas vazias que vão armazenar os dados dos equipamentos: equipamentos, valores, seriais e departamentos.
A segunda parte é um laço while que pede ao usuário que digite os dados de cada equipamento e os adiciona nas respectivas listas. O laço se repete até que o usuário digite algo diferente de “S”.
A terceira parte é um laço for que imprime os dados do primeiro equipamento cadastrado. Note que há um break no final do laço, o que significa que ele só vai iterar uma vez. Isso parece um erro de lógica, pois o programa não vai mostrar os dados dos demais equipamentos.
A quarta parte é uma busca por um equipamento pelo seu nome. O programa pede ao usuário que digite o nome do equipamento que deseja buscar e depois percorre a lista de equipamentos procurando por uma correspondência. Se encontrar, imprime o valor e o serial do equipamento encontrado.
A quinta parte é uma operação de depreciação de um equipamento pelo seu nome. O programa pede ao usuário que digite o nome do equipamento que será depreciado e depois percorre a lista de equipamentos procurando por uma correspondência. Se encontrar, imprime o valor antigo do equipamento e depois atualiza o valor na lista, multiplicando-o por 0.9 (ou seja, reduzindo 10% do valor original). Em seguida, imprime o novo valor do equipamento depreciado.
A sexta parte é uma operação de exclusão de um equipamento pelo seu serial. O programa pede ao usuário que digite o serial do equipamento que será excluído e depois percorre a lista de seriais procurando por uma correspondência. Se encontrar, deleta os dados do equipamento nas quatro listas usando a função del.
A sétima parte é outro laço for que imprime os dados dos equipamentos restantes após as operações de busca, depreciação e exclusão.

Algumas sugestões de melhorias são:

Usar uma estrutura de dados mais adequada para armazenar os dados dos equipamentos, como um dicionário ou uma classe. Isso facilitaria o acesso e a manipulação dos dados, evitando o uso de quatro listas separadas e sincronizadas pelo índice.
Usar funções para encapsular as operações de cadastro, busca, depreciação e exclusão, tornando o código mais modular e reutilizável. Isso também evitaria a repetição de código, como os laços for que percorrem a lista de equipamentos procurando por uma correspondência.
Usar nomes de variáveis mais significativos e padronizados, seguindo as convenções do Python. Por exemplo, usar nome em vez de buscas, equipamento em vez de depreciacao, e indice em vez de indice.
Usar comentários para explicar o que cada parte do código faz, facilitando a compreensão e a manutenção do programa.
Usar tratamento de exceções para lidar com possíveis erros de entrada do usuário, como digitar um valor não numérico para o serial ou o valor, ou digitar um nome ou serial que não existe na lista de equipamentos.
